{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Home Under construction Nothing here yet... Try exploring the menu","title":"Home"},{"location":"#home","text":"","title":"Home"},{"location":"#under-construction","text":"Nothing here yet... Try exploring the menu","title":"Under construction"},{"location":"About%20me/","text":"About me Education From To Organization Qualification 2020 ongoing Slovak University of Technology in Bratislava PhD. in applied informatics 2018 2020 National Technical University of Ukraine \"Igor Sikorsky Kyiv Polytechnic Institute\" Master degree in software engineering 2014 2018 National Technical University of Ukraine \"Igor Sikorsky Kyiv Polytechnic Institute\" Bachelor degree in software engineering Work experience Nov 2017 \u2014 Nov 2018 Software developer at Risa Tech, inc. Converting inherited C/C++ code to .Net platform (C#, C++/CLI) developing UI with WPF, Telerik UI and Windows Forms developing a report generation system with Telerik Reporting Projects DQ skinning for Unity GPU dual quaternion skinning for Unity engine with an original bulging compensation method. ProTeGe v2 Graph-based procedural texture generator in Unity engine with real-time preview. ProTeGe v1 Procedural Texture Generator in C++ Multi-threaded CPU computations, wxWidgets GUI","title":"About me"},{"location":"About%20me/#about-me","text":"","title":"About me"},{"location":"About%20me/#education","text":"From To Organization Qualification 2020 ongoing Slovak University of Technology in Bratislava PhD. in applied informatics 2018 2020 National Technical University of Ukraine \"Igor Sikorsky Kyiv Polytechnic Institute\" Master degree in software engineering 2014 2018 National Technical University of Ukraine \"Igor Sikorsky Kyiv Polytechnic Institute\" Bachelor degree in software engineering","title":"Education"},{"location":"About%20me/#work-experience","text":"","title":"Work experience"},{"location":"About%20me/#nov-2017-nov-2018","text":"Software developer at Risa Tech, inc. Converting inherited C/C++ code to .Net platform (C#, C++/CLI) developing UI with WPF, Telerik UI and Windows Forms developing a report generation system with Telerik Reporting","title":"Nov 2017 &mdash; Nov 2018"},{"location":"About%20me/#projects","text":"DQ skinning for Unity GPU dual quaternion skinning for Unity engine with an original bulging compensation method. ProTeGe v2 Graph-based procedural texture generator in Unity engine with real-time preview. ProTeGe v1 Procedural Texture Generator in C++ Multi-threaded CPU computations, wxWidgets GUI","title":"Projects"},{"location":"For%20students%20%28HTML%2C%20CSS%29/Additional%20Resources/","text":"Additional Resources Mozilla Developer Network Detailed and exhaustive information, but can be overwhelming, if you aren't looking for a specific thing. Useful when you wish to learn about a particular tag, attribute, CSS property, etc. w3school More approachable, but does not give all the details. Better suited to familiarize yourself with HTML/CSS in general and learn which tools are available.","title":"Additional Resources"},{"location":"For%20students%20%28HTML%2C%20CSS%29/Additional%20Resources/#additional-resources","text":"Mozilla Developer Network Detailed and exhaustive information, but can be overwhelming, if you aren't looking for a specific thing. Useful when you wish to learn about a particular tag, attribute, CSS property, etc. w3school More approachable, but does not give all the details. Better suited to familiarize yourself with HTML/CSS in general and learn which tools are available.","title":"Additional Resources"},{"location":"For%20students%20%28HTML%2C%20CSS%29/CSS%20Selectors/","text":"CSS Selectors Most Common Selectors Selector Description Comment * Any element (universal selector). #elementID Any element with id=\"elementID\" . A page should only have one element with a given id . .enementClass Any element with class=\"elementClass\" . An element can have multiple classes, separated by space. div Any <div> . div#divID.divClass Any <div> with id=\"id\" and class=\"divClass\" . Combinators Selector Description Comment div, p Any <div> , and any <p> . div p Any <p> inside a <div> . Does not have to be a direct child. div > p Any <p> , which is a direct child of a <div> . div + p Any <p> immediately after a <div> . Links Selector Description a:link Unvisited link. a:visited Visited link. Hover and Click Selector Description .button:active Any element with class=\"button\" , which is currently being clicked. .button:hover Any element with class=\"button\" , which has the cursor hovering above it. Further Reading MDN CSS selectors w3school CSS Selector Reference","title":"CSS Selectors"},{"location":"For%20students%20%28HTML%2C%20CSS%29/CSS%20Selectors/#css-selectors","text":"","title":"CSS Selectors"},{"location":"For%20students%20%28HTML%2C%20CSS%29/CSS%20Selectors/#most-common-selectors","text":"Selector Description Comment * Any element (universal selector). #elementID Any element with id=\"elementID\" . A page should only have one element with a given id . .enementClass Any element with class=\"elementClass\" . An element can have multiple classes, separated by space. div Any <div> . div#divID.divClass Any <div> with id=\"id\" and class=\"divClass\" .","title":"Most Common Selectors"},{"location":"For%20students%20%28HTML%2C%20CSS%29/CSS%20Selectors/#combinators","text":"Selector Description Comment div, p Any <div> , and any <p> . div p Any <p> inside a <div> . Does not have to be a direct child. div > p Any <p> , which is a direct child of a <div> . div + p Any <p> immediately after a <div> .","title":"Combinators"},{"location":"For%20students%20%28HTML%2C%20CSS%29/CSS%20Selectors/#links","text":"Selector Description a:link Unvisited link. a:visited Visited link.","title":"Links"},{"location":"For%20students%20%28HTML%2C%20CSS%29/CSS%20Selectors/#hover-and-click","text":"Selector Description .button:active Any element with class=\"button\" , which is currently being clicked. .button:hover Any element with class=\"button\" , which has the cursor hovering above it.","title":"Hover and Click"},{"location":"For%20students%20%28HTML%2C%20CSS%29/CSS%20Selectors/#further-reading","text":"MDN CSS selectors w3school CSS Selector Reference","title":"Further Reading"},{"location":"For%20students%20%28HTML%2C%20CSS%29/Examples%20and%20Snippets/","text":"Examples and Snippets Flexbox cheat sheet Repl.it CSS demo Note To create your own editable copy in Repl.it , press Fork repl button (top right).","title":"Examples and Snippets"},{"location":"For%20students%20%28HTML%2C%20CSS%29/Examples%20and%20Snippets/#examples-and-snippets","text":"Flexbox cheat sheet Repl.it CSS demo Note To create your own editable copy in Repl.it , press Fork repl button (top right).","title":"Examples and Snippets"},{"location":"For%20students%20%28HTML%2C%20CSS%29/Requirements/","text":"Requirements URL Format Make sure to familiarize yourself with the URL format. Reading materials MDN \u2014 what is a URL w3school \u2014 html links w3school \u2014 html filepaths In the checkpoints 3 and 4 you must use either relative , or \"implicit domain name\" URLs for links between pages of your website. When making links to other websites, use full URL format. Example relative images/example.png ../../css/example.css implicit domain /index.html /images/phone/example.jpg full URL https://developer.mozilla.org/en-US/docs/Learn https://google.com Warning Using a file:// URL will be considered a major mistake in checkpoints 3 and 4. These links only work on your computer, and will break if you move the website to another folder! file URI scheme \u2014 Wikipedia Code in the Report Minifier A \"minifier\" is a tool, which can compress your HTML and CSS code by removing spaces and line breaks. This does not prevent the code from working, but makes it difficult to read for humans. On the positive side, it becomes more compact. Beautifier A \"beautifier\" is a tool, which automatically inserts spaces and line breaks into your HTML and CSS code, making it easier to read. It can restore minified code to a readable state. When inserting code into the pdf report: use a monospace font for code ( Liberation Mono , Courier New , or similar) use a smaller font size, than normal text normal text: 14 pt code: 10 pt do NOT copy the formatting from your IDE (background, font color, etc.) run your code through a minifier prior to inserting into pdf Warning Run every .html and .css file through a validator before submitting! html validator css validator Server For php code to function, you need a server. Simply opening a .php file in your browser will not work. Most web server extensions for VS code do NOT support php, either. You can use any server you like. I recommend xampp \u2014 it contains everything you need in a single package, that is ready to use after installation. Layout For examples of creating the page layout, look here . In particular: Repl.it \u2014 CSS demo \u2014 Multi-column layout Repl.it \u2014 CSS demo \u2014 Grid layout example Grid and flexbox serve a similar function, and in most cases you could use either. I recommend starting with flexbox, as it is somewhat simpler. Inspector In order to simulate smaller screen width, you can use the inspector panel ( firefox , chrome , edge , safari ). Usually you can open the inspector with F12 key, or with \"right click \u2014 inspect element\". Depending on how your PC is configured, you might need to press Fn key together with F12. Make the inspector panel vertical, and change its width to make your website view wider, or narrower: Warning Some browsers offer \"responsive design mode\" in the inspector, promising to simulate how your website would look on a smartphone. Last time I tried this, simply changing the width of the page provided more accurate representation of how your website would look on a smartphone, than any of these tools. I do not recommend using them. CSS Animations In order to get full points for CSS animations, use both @keyframes and transitions (separately). Box-sizing Use box-sizing set to border-box for all elements: * { box-sizing: border-box; } Layout Use flexbox or grid for layout. Look at Examples and snippets . Warning Using <table> for layour is NOT allowed. It should only be used for actual tables. Responsive Page Checkpoint 3 requires your website to be responsive. This can be achieved in multiple ways, but for this project you MUST use @media rules. The LAYOUT of your website must change SIGNIFICANTLY between different screen widths. Simply changing font size, or some colors, is NOT sufficient. Look at \"Grid layout example\" in repl . Use viewport meta tag : <meta name=\"viewport\" content=\"width=device-width\"> Semantic Elements Use semantic elements when appropriate. At the very least you should have: <nav> <main> <article> or <section> (one is sufficient, because the distinction between the two is not always clear)","title":"Requirements"},{"location":"For%20students%20%28HTML%2C%20CSS%29/Requirements/#requirements","text":"","title":"Requirements"},{"location":"For%20students%20%28HTML%2C%20CSS%29/Requirements/#url-format","text":"Make sure to familiarize yourself with the URL format. Reading materials MDN \u2014 what is a URL w3school \u2014 html links w3school \u2014 html filepaths In the checkpoints 3 and 4 you must use either relative , or \"implicit domain name\" URLs for links between pages of your website. When making links to other websites, use full URL format. Example relative images/example.png ../../css/example.css implicit domain /index.html /images/phone/example.jpg full URL https://developer.mozilla.org/en-US/docs/Learn https://google.com Warning Using a file:// URL will be considered a major mistake in checkpoints 3 and 4. These links only work on your computer, and will break if you move the website to another folder! file URI scheme \u2014 Wikipedia","title":"URL Format"},{"location":"For%20students%20%28HTML%2C%20CSS%29/Requirements/#code-in-the-report","text":"Minifier A \"minifier\" is a tool, which can compress your HTML and CSS code by removing spaces and line breaks. This does not prevent the code from working, but makes it difficult to read for humans. On the positive side, it becomes more compact. Beautifier A \"beautifier\" is a tool, which automatically inserts spaces and line breaks into your HTML and CSS code, making it easier to read. It can restore minified code to a readable state. When inserting code into the pdf report: use a monospace font for code ( Liberation Mono , Courier New , or similar) use a smaller font size, than normal text normal text: 14 pt code: 10 pt do NOT copy the formatting from your IDE (background, font color, etc.) run your code through a minifier prior to inserting into pdf Warning Run every .html and .css file through a validator before submitting! html validator css validator","title":"Code in the Report"},{"location":"For%20students%20%28HTML%2C%20CSS%29/Requirements/#server","text":"For php code to function, you need a server. Simply opening a .php file in your browser will not work. Most web server extensions for VS code do NOT support php, either. You can use any server you like. I recommend xampp \u2014 it contains everything you need in a single package, that is ready to use after installation.","title":"Server"},{"location":"For%20students%20%28HTML%2C%20CSS%29/Requirements/#layout","text":"For examples of creating the page layout, look here . In particular: Repl.it \u2014 CSS demo \u2014 Multi-column layout Repl.it \u2014 CSS demo \u2014 Grid layout example Grid and flexbox serve a similar function, and in most cases you could use either. I recommend starting with flexbox, as it is somewhat simpler.","title":"Layout"},{"location":"For%20students%20%28HTML%2C%20CSS%29/Requirements/#inspector","text":"In order to simulate smaller screen width, you can use the inspector panel ( firefox , chrome , edge , safari ). Usually you can open the inspector with F12 key, or with \"right click \u2014 inspect element\". Depending on how your PC is configured, you might need to press Fn key together with F12. Make the inspector panel vertical, and change its width to make your website view wider, or narrower: Warning Some browsers offer \"responsive design mode\" in the inspector, promising to simulate how your website would look on a smartphone. Last time I tried this, simply changing the width of the page provided more accurate representation of how your website would look on a smartphone, than any of these tools. I do not recommend using them.","title":"Inspector"},{"location":"For%20students%20%28HTML%2C%20CSS%29/Requirements/#css-animations","text":"In order to get full points for CSS animations, use both @keyframes and transitions (separately).","title":"CSS Animations"},{"location":"For%20students%20%28HTML%2C%20CSS%29/Requirements/#box-sizing","text":"Use box-sizing set to border-box for all elements: * { box-sizing: border-box; }","title":"Box-sizing"},{"location":"For%20students%20%28HTML%2C%20CSS%29/Requirements/#layout_1","text":"Use flexbox or grid for layout. Look at Examples and snippets . Warning Using <table> for layour is NOT allowed. It should only be used for actual tables.","title":"Layout"},{"location":"For%20students%20%28HTML%2C%20CSS%29/Requirements/#responsive-page","text":"Checkpoint 3 requires your website to be responsive. This can be achieved in multiple ways, but for this project you MUST use @media rules. The LAYOUT of your website must change SIGNIFICANTLY between different screen widths. Simply changing font size, or some colors, is NOT sufficient. Look at \"Grid layout example\" in repl . Use viewport meta tag : <meta name=\"viewport\" content=\"width=device-width\">","title":"Responsive Page"},{"location":"For%20students%20%28HTML%2C%20CSS%29/Requirements/#semantic-elements","text":"Use semantic elements when appropriate. At the very least you should have: <nav> <main> <article> or <section> (one is sufficient, because the distinction between the two is not always clear)","title":"Semantic Elements"},{"location":"For%20students%20%28HTML%2C%20CSS%29/Semantic%20HTML%20Elements/","text":"Semantic HTML Elements Semantic elements work similarly to <div> , but they also convey their purpose on the page (example: <nav> provides navigation links), and help define the structure of your page. Non-semantic elements, on the other hand, do not have a strictly defined purpose (example: <div> ). By examining the semantic elements on your page, a program can automatically determine the hierarchical structure of your content, and build a table of contents. This is useful for search engines and screen readers, among other things. It also makes the HTML code easier to read and understand for humans. The following is NOT a complete list of semantic elements (refer to Further Reading section to learn about other semantic elements): nav Provides navigation (menu). Can be placed inside a <header> , <aside> , or on its own. header Placed on top of the page. Can contain headings ( <h1> , <h2> , ...), navigation ( nav ), website logo, search form. footer Placed at the bottom of th page. Can contain author contacts, credits, copyright, links to related documents, non-essential information. article A self-contained block of content, which does not depend on surrounding elements of the page to make sense. For example, a single product in an online shop can be represented as an <article> . It might appear in different contexts and still make sense, for example: in the list of available products, in the list of discounted products, and in the shopping cart. section A part of a whole. This can be a section of the page, or a section of the article. Section is less \"strict\" than article, as it does not require the content inside it to be independent (self-contained). A single product record in an online shop ( <article> ) can have separate sections for the picture, description, and comments. aside Should be placed as a sidebar (left or right). Might contain links to related articles, tags, interesting facts, a highlight of recent updates, advertising, download links, etc. Content of <aside> should be less important than the content of <main> . Most of the time the user should spend interacting with <main> , and only looking at <aside> occasionally. main Main content of the page. Further Reading MDN Semantics in HTML w3school HTML Semantic Elements Example Layout .semantic-example-container { width:100%; max-width: 500px; min-width: 400px; --semantic-example-margin: 10px; } .semantic-example { border: 2px solid black; box-sizing: border-box; text-align: center; margin: var(--semantic-example-margin); padding-top: 4px; padding-bottom: 4px; color: black; background: #CCCCFF; } .semantic-example > .semantic-example { background: #CCFFCC; } .semantic-example > .semantic-example > .semantic-example { background: #FFCCCC; } .semantic-example-nav, .semantic-example .semantic-example-nav { background: #FFFFAA; } .semantic-example-flex { display: flex; gap: var(--semantic-example-margin); margin-left: var(--semantic-example-margin); margin-right: var(--semantic-example-margin); } .semantic-example-flex > * { margin: 0px; } .semantic-example-flex > div:nth-child(2) { flex-grow: 1; } .semantic-example-flex > div:nth-child(3) { width: 100px; } .semantic-example-flex > div:nth-child(1) { width: 100px; } Horizontal Menu header nav aside main article section section article section section aside footer Vertical Menu header aside nav main article section section article section section aside footer","title":"Semantic HTML Elements"},{"location":"For%20students%20%28HTML%2C%20CSS%29/Semantic%20HTML%20Elements/#semantic-html-elements","text":"Semantic elements work similarly to <div> , but they also convey their purpose on the page (example: <nav> provides navigation links), and help define the structure of your page. Non-semantic elements, on the other hand, do not have a strictly defined purpose (example: <div> ). By examining the semantic elements on your page, a program can automatically determine the hierarchical structure of your content, and build a table of contents. This is useful for search engines and screen readers, among other things. It also makes the HTML code easier to read and understand for humans. The following is NOT a complete list of semantic elements (refer to Further Reading section to learn about other semantic elements): nav Provides navigation (menu). Can be placed inside a <header> , <aside> , or on its own. header Placed on top of the page. Can contain headings ( <h1> , <h2> , ...), navigation ( nav ), website logo, search form. footer Placed at the bottom of th page. Can contain author contacts, credits, copyright, links to related documents, non-essential information. article A self-contained block of content, which does not depend on surrounding elements of the page to make sense. For example, a single product in an online shop can be represented as an <article> . It might appear in different contexts and still make sense, for example: in the list of available products, in the list of discounted products, and in the shopping cart. section A part of a whole. This can be a section of the page, or a section of the article. Section is less \"strict\" than article, as it does not require the content inside it to be independent (self-contained). A single product record in an online shop ( <article> ) can have separate sections for the picture, description, and comments. aside Should be placed as a sidebar (left or right). Might contain links to related articles, tags, interesting facts, a highlight of recent updates, advertising, download links, etc. Content of <aside> should be less important than the content of <main> . Most of the time the user should spend interacting with <main> , and only looking at <aside> occasionally. main Main content of the page.","title":"Semantic HTML Elements"},{"location":"For%20students%20%28HTML%2C%20CSS%29/Semantic%20HTML%20Elements/#further-reading","text":"MDN Semantics in HTML w3school HTML Semantic Elements","title":"Further Reading"},{"location":"For%20students%20%28HTML%2C%20CSS%29/Semantic%20HTML%20Elements/#example-layout","text":".semantic-example-container { width:100%; max-width: 500px; min-width: 400px; --semantic-example-margin: 10px; } .semantic-example { border: 2px solid black; box-sizing: border-box; text-align: center; margin: var(--semantic-example-margin); padding-top: 4px; padding-bottom: 4px; color: black; background: #CCCCFF; } .semantic-example > .semantic-example { background: #CCFFCC; } .semantic-example > .semantic-example > .semantic-example { background: #FFCCCC; } .semantic-example-nav, .semantic-example .semantic-example-nav { background: #FFFFAA; } .semantic-example-flex { display: flex; gap: var(--semantic-example-margin); margin-left: var(--semantic-example-margin); margin-right: var(--semantic-example-margin); } .semantic-example-flex > * { margin: 0px; } .semantic-example-flex > div:nth-child(2) { flex-grow: 1; } .semantic-example-flex > div:nth-child(3) { width: 100px; } .semantic-example-flex > div:nth-child(1) { width: 100px; }","title":"Example Layout"},{"location":"For%20students%20%28HTML%2C%20CSS%29/Semantic%20HTML%20Elements/#horizontal-menu","text":"header nav aside main article section section article section section aside footer","title":"Horizontal Menu"},{"location":"For%20students%20%28HTML%2C%20CSS%29/Semantic%20HTML%20Elements/#vertical-menu","text":"header aside nav main article section section article section section aside footer","title":"Vertical Menu"},{"location":"For%20students%20%28HTML%2C%20CSS%29/Tools/","text":"Tools This page lists some tools you can use when developing the website for the course \"z\u00e1kladn\u00e9 met\u00f3dy tvorby multimedi\u00e1lneho obsahu\" . Validators Validators check your HTML and CSS files for errors. The browser will often attempt to make sense of the code, that contains mistakes, and guess the intention behind it. Sometimes it works, sometimes it doesn't. This behavior is unpredictable between different browsers, and can result in the page being completely broken in one browser, while appearing perfectly functional in the other. HTML validator.w3.org CSS jigsaw.w3.org Code Editor VS Code Warning You can use any code editor of your choice, with the exception of WYSIWYG html editors. Using WYSIWYG editors is strictly forbidden. VS Code Extensions Highly Recommended Prettier (improves code readability) Live server HTML CSS Support Validators W3C Web Validator (requires internet connection) W3C Validation (requires java) Convenience CSS Flexbox Cheatsheet Lorem Text Generator (generate fake text) Warning Final project should contain actual text, not lorem ipsum. vscode-icons (gives icons to folders and different file extensions) Workspace Explorer (conveniently switch between several projects) Wireframe Excalidraw Figma Color Palette Paletton Colourcode Beautifier / Minifier Beautifytools Minifier Minifier compresses your code by removing line breaks and whitespaces. This way it will take up less pages in the report. Beautifier Beautifier makes the code more readable by adding line breaks and whitespaces whenever appropriate. It effectively \"reverses\" minification. Note Neither the minifier, nor the beautifier, should affect the way your web page looks in the browser. It only changes how the code looks.","title":"Tools"},{"location":"For%20students%20%28HTML%2C%20CSS%29/Tools/#tools","text":"This page lists some tools you can use when developing the website for the course \"z\u00e1kladn\u00e9 met\u00f3dy tvorby multimedi\u00e1lneho obsahu\" .","title":"Tools"},{"location":"For%20students%20%28HTML%2C%20CSS%29/Tools/#validators","text":"Validators check your HTML and CSS files for errors. The browser will often attempt to make sense of the code, that contains mistakes, and guess the intention behind it. Sometimes it works, sometimes it doesn't. This behavior is unpredictable between different browsers, and can result in the page being completely broken in one browser, while appearing perfectly functional in the other.","title":"Validators"},{"location":"For%20students%20%28HTML%2C%20CSS%29/Tools/#html","text":"validator.w3.org","title":"HTML"},{"location":"For%20students%20%28HTML%2C%20CSS%29/Tools/#css","text":"jigsaw.w3.org","title":"CSS"},{"location":"For%20students%20%28HTML%2C%20CSS%29/Tools/#code-editor","text":"VS Code Warning You can use any code editor of your choice, with the exception of WYSIWYG html editors. Using WYSIWYG editors is strictly forbidden.","title":"Code Editor"},{"location":"For%20students%20%28HTML%2C%20CSS%29/Tools/#vs-code-extensions","text":"","title":"VS Code Extensions"},{"location":"For%20students%20%28HTML%2C%20CSS%29/Tools/#highly-recommended","text":"Prettier (improves code readability) Live server HTML CSS Support","title":"Highly Recommended"},{"location":"For%20students%20%28HTML%2C%20CSS%29/Tools/#validators_1","text":"W3C Web Validator (requires internet connection) W3C Validation (requires java)","title":"Validators"},{"location":"For%20students%20%28HTML%2C%20CSS%29/Tools/#convenience","text":"CSS Flexbox Cheatsheet Lorem Text Generator (generate fake text) Warning Final project should contain actual text, not lorem ipsum. vscode-icons (gives icons to folders and different file extensions) Workspace Explorer (conveniently switch between several projects)","title":"Convenience"},{"location":"For%20students%20%28HTML%2C%20CSS%29/Tools/#wireframe","text":"Excalidraw Figma","title":"Wireframe"},{"location":"For%20students%20%28HTML%2C%20CSS%29/Tools/#color-palette","text":"Paletton Colourcode","title":"Color Palette"},{"location":"For%20students%20%28HTML%2C%20CSS%29/Tools/#beautifier-minifier","text":"Beautifytools Minifier Minifier compresses your code by removing line breaks and whitespaces. This way it will take up less pages in the report. Beautifier Beautifier makes the code more readable by adding line breaks and whitespaces whenever appropriate. It effectively \"reverses\" minification. Note Neither the minifier, nor the beautifier, should affect the way your web page looks in the browser. It only changes how the code looks.","title":"Beautifier / Minifier"},{"location":"For%20students%20%28HTML%2C%20CSS%29/Web%20Page%20Design%20Guidelines/","text":"Web Page Design Guidelines Some advice for making a clean, functional and aesthetically pleasing web-page. Animation and Hovering Animations and :hover style can hint towards which elements are interactive. Don't use :hover on non-interactive elements to avoid confusion. .demo-button { color: white; padding: 4px; background: #55b; display: inline-block; user-select: none; border-radius: 8px; box-shadow: 0px 5px 0px #336, 2px 8px 3px #0008; border: 2px solid #fff2; padding: 6px 12px; font-size: 0.8rem; } .demo-button:hover { transform: scale(1.02); box-shadow: 0px 6px 0px #336, 3px 10px 5px #0008; border-color: #fff3; background: #66c; } .demo-button:active{ transform: translateY(2px); box-shadow: 0px 5px 0px #336, 1px 8px 2px #000b; background: #55b; } I'm a button. Press me! Center of the Page Keep the main content towards the center of the page, where it is most comfortable to read. Keep the left and right edges of the screen empty, or reserve them for the content, which the user looks at only occasionally (suggested links, tags, FAQ, menu, recent posts, etc.) Colors Don't use too many colors (2-4 is optimal). Pick one \"main\" color which you will use the most, and use the other \"secondary\" colors for accents (buttons, headings, etc.). The accent colors are usually more saturated and vivid to attract attention. Use vivid colors sparingly. The \"main\" color should be easy on the eyes (desaturated). .text-color-demo { padding: 4px; margin: 8px; width: 200px; margin-left: 50%; transform: translateX(-50%); border-radius: 8px; padding-left: 16px; } .text-color-demo-container { background: rgb(60,60,60); padding:12px; display: inline-block; border-radius: 20px; margin-left: 50%; transform: translateX(-50%); margin-top:-16px; } See color palette tools . Consistency Have consistency in your style \u2014 for example, have a list of preset colors instead of selecting a \"roughly similar\" color by hand every time. Same with border styles, rounded corners, etc. Use CSS variables: body { --border-radius : 5 px ; } div . bordered { border-radius : var ( --border-radius ); } li . menu-item { border-radius : var ( --border-radius ); } Further Reading MDN Using CSS custom properties (variables) w3school CSS Variables \u2014 The var( ) Function Get Straight to the Point When the user opens your website, they should immediately see the content they came for \u2014 not the full page logo (no matter how much you like it). Menu If the menu is on the top and sticky , it should be very thin to maximize the amount of useful content that fits on the screen. With a non-sticky menu you can afford a bit more vertical space. Tables Do not use tables for layout! Element <table> and style display: table should only be used for tabular data. For the page layout use display: grid or display: flex in CSS. Text Text must be easy to read (size, color, contrast, font). .text-shadow-demo { color: #000; width: fit-content; display: grid; grid-template-columns: 1fr; margin-left: auto; margin-right: auto; } .text-shadow-demo > div { margin-bottom: 16px; font-size: 2rem; font-weight: bold; padding: 0px 12px; } Shadows This is OK This is also OK This is bad This is also bad Width Aim to have between 60 and 90 characters per line of text for comfortable reading.","title":"Web Page Design Guidelines"},{"location":"For%20students%20%28HTML%2C%20CSS%29/Web%20Page%20Design%20Guidelines/#web-page-design-guidelines","text":"Some advice for making a clean, functional and aesthetically pleasing web-page.","title":"Web Page Design Guidelines"},{"location":"For%20students%20%28HTML%2C%20CSS%29/Web%20Page%20Design%20Guidelines/#animation-and-hovering","text":"Animations and :hover style can hint towards which elements are interactive. Don't use :hover on non-interactive elements to avoid confusion. .demo-button { color: white; padding: 4px; background: #55b; display: inline-block; user-select: none; border-radius: 8px; box-shadow: 0px 5px 0px #336, 2px 8px 3px #0008; border: 2px solid #fff2; padding: 6px 12px; font-size: 0.8rem; } .demo-button:hover { transform: scale(1.02); box-shadow: 0px 6px 0px #336, 3px 10px 5px #0008; border-color: #fff3; background: #66c; } .demo-button:active{ transform: translateY(2px); box-shadow: 0px 5px 0px #336, 1px 8px 2px #000b; background: #55b; } I'm a button. Press me!","title":"Animation and Hovering"},{"location":"For%20students%20%28HTML%2C%20CSS%29/Web%20Page%20Design%20Guidelines/#center-of-the-page","text":"Keep the main content towards the center of the page, where it is most comfortable to read. Keep the left and right edges of the screen empty, or reserve them for the content, which the user looks at only occasionally (suggested links, tags, FAQ, menu, recent posts, etc.)","title":"Center of the Page"},{"location":"For%20students%20%28HTML%2C%20CSS%29/Web%20Page%20Design%20Guidelines/#colors","text":"Don't use too many colors (2-4 is optimal). Pick one \"main\" color which you will use the most, and use the other \"secondary\" colors for accents (buttons, headings, etc.). The accent colors are usually more saturated and vivid to attract attention. Use vivid colors sparingly. The \"main\" color should be easy on the eyes (desaturated). .text-color-demo { padding: 4px; margin: 8px; width: 200px; margin-left: 50%; transform: translateX(-50%); border-radius: 8px; padding-left: 16px; } .text-color-demo-container { background: rgb(60,60,60); padding:12px; display: inline-block; border-radius: 20px; margin-left: 50%; transform: translateX(-50%); margin-top:-16px; } See color palette tools .","title":"Colors"},{"location":"For%20students%20%28HTML%2C%20CSS%29/Web%20Page%20Design%20Guidelines/#consistency","text":"Have consistency in your style \u2014 for example, have a list of preset colors instead of selecting a \"roughly similar\" color by hand every time. Same with border styles, rounded corners, etc. Use CSS variables: body { --border-radius : 5 px ; } div . bordered { border-radius : var ( --border-radius ); } li . menu-item { border-radius : var ( --border-radius ); }","title":"Consistency"},{"location":"For%20students%20%28HTML%2C%20CSS%29/Web%20Page%20Design%20Guidelines/#further-reading","text":"MDN Using CSS custom properties (variables) w3school CSS Variables \u2014 The var( ) Function","title":"Further Reading"},{"location":"For%20students%20%28HTML%2C%20CSS%29/Web%20Page%20Design%20Guidelines/#get-straight-to-the-point","text":"When the user opens your website, they should immediately see the content they came for \u2014 not the full page logo (no matter how much you like it).","title":"Get Straight to the Point"},{"location":"For%20students%20%28HTML%2C%20CSS%29/Web%20Page%20Design%20Guidelines/#menu","text":"If the menu is on the top and sticky , it should be very thin to maximize the amount of useful content that fits on the screen. With a non-sticky menu you can afford a bit more vertical space.","title":"Menu"},{"location":"For%20students%20%28HTML%2C%20CSS%29/Web%20Page%20Design%20Guidelines/#tables","text":"Do not use tables for layout! Element <table> and style display: table should only be used for tabular data. For the page layout use display: grid or display: flex in CSS.","title":"Tables"},{"location":"For%20students%20%28HTML%2C%20CSS%29/Web%20Page%20Design%20Guidelines/#text","text":"Text must be easy to read (size, color, contrast, font). .text-shadow-demo { color: #000; width: fit-content; display: grid; grid-template-columns: 1fr; margin-left: auto; margin-right: auto; } .text-shadow-demo > div { margin-bottom: 16px; font-size: 2rem; font-weight: bold; padding: 0px 12px; }","title":"Text"},{"location":"For%20students%20%28HTML%2C%20CSS%29/Web%20Page%20Design%20Guidelines/#shadows","text":"This is OK This is also OK This is bad This is also bad","title":"Shadows"},{"location":"For%20students%20%28HTML%2C%20CSS%29/Web%20Page%20Design%20Guidelines/#width","text":"Aim to have between 60 and 90 characters per line of text for comfortable reading.","title":"Width"},{"location":"For%20students%20%28JS%29/Clean%20code/","text":"Clean code Some advice about keeping your code clean and manageable Long functions When a function becomes too long, extract parts of it into separate functions. Example function DrawEverything(canvas) { // lots of code // ... // ... // ... } Becomes: function DrawEverything(canvas) { drawBackground(canvas); drawEnemies(canvas); drawPlayer(canvas); drawProjectiles(canvas); } Big classes Same as with the big functions, try to break them up. Too many arguments If you have functions with 6+ arguments, create a class to group up related values. Example function printDocument( paperSize, marginLeft, marginRight, marginTop, marginBotton, numCopies, resolution, text, fontColor, fontSize, fontFamily, lineSpacing, paragraphIndentation ) { // do the printing } Becomes: class Margin { constructor (left, right, top bottom) { this .left = left; this .right = right; this .top = top; this .bottom = bottom; } } class PrintParameters { constructor (paperSize, margin, numCopies, resolution) { this .paperSize = paperSize; this .margin = margin; this .numCopies = numCopies; this .resolution = resolution; } } class Font { constructor (color, size, family) { this .color = color; this .size = size; this .family = family; } } class DocumentFormat { constructor (font, lineSpacing, paragraphIndentation) { this .font = font; this .lineSpacing = lineSpacing; this .paragraphIndentation = paragraphIndentation; } } class TextDocument { constructor (text, format) { this .text = text; this .format = format; } } function printDocument(printParameters, textDocument) { // do the printing } Too many attributes Similar to the previous issue, but instead of having too many function arguments, you have too many attributes in a class. When a class has too many attributes, group them into new classes. Data duplication Avoid having multiple variables holding copies of the same value. Also, if certain value can be trivially computed from existing variables, it's usually better to provide a function for computing it, instead of storing it in a variable. Example class Player { constructor (health) { this .health = health; this .isDead = false ; } receiveDamage(amount) { this .health -= amount; if ( this .health < 0 ) { this .health = 0 ; } if ( this .health == 0 ) { this .isDead = true ; } } heal(amount) { this .health += amount; if ( this .health > 0 ) { this .isDead = false ; } } } Becomes: class Player { constructor (health) { this .health = health; } receiveDamage(amount) { this .health -= amount; if ( this .health < 0 ) { this .health = 0 ; } } heal(amount) { this .health += amount; } getIsDead ( ) { return this .health <= 0 ; } } Note Second variant is shorter, because there is no need to update this.isDead every time health changes. In the second variant it is impossible for the value to be incorrect, as long as the function isDead( ) is correct. In the first variant forgetting to update this.isDead (or updating it incorrectly) will introduce a bug, which can be difficult to find. Code duplication in classes If you have multiple classes with similar methods and/or attributes, consider extracting the common part into a base class and using inheritance. Example class Vector2 { constructor (x, y) { this .x = x; this .y = y; } } class Player { constructor (name){ this .position = new Vector2( 0 , 0 ); this .name = name; } move(offset){ this .position.x += offset.x; this .position.y += offset.y; } // Player-related methods // ... // ... } class Skeleton { constructor (){ this .position = new Vector2( 0 , 0 ); this .name = \"Skeleton\" ; } move(offset){ this .position.x += offset.x; this .position.y += offset.y; console.log( \"rattling of bones echoes through the dungeon\" ); } // Skeleton-related methods // ... // ... } class Slime { constructor (){ this .position = new Vector2( 0 , 0 ); this .name = \"Slime\" ; } move(offset){ this .position.x += offset.x; this .position.y += offset.y; } // Slime-related methods // ... // ... } Becomes: class Vector2 { constructor (x, y) { this .x = x; this .y = y; } } class Character { constructor (name){ this .position = new Vector2( 0 , 0 ); this .name = name; } move(offset){ this .position.x += offset.x; this .position.y += offset.y; } } class Player extends Character { constructor (name){ super (name); } // Player-related methods // ... // ... } class Skeleton extends Character { constructor (){ super ( \"Skeleton\" ); } move(offset){ super .move(offset); console.log( \"rattling of bones echoes through the dungeon\" ); } // Skeleton-related methods // ... // ... } class Slime extends Character { constructor (){ super ( \"Slime\" ); } // Slime-related methods // ... // ... } Code duplication in functions If you have multiple functions with similar code, consider extracting the common part into a separate function. Example function castFireball() { console.log( \"preparing to cast...\" ); // inconsistency console.log( \"reading the spell scroll: Fireball...\" ); console.log( \"a massive sphere of flame flies towards the enemy!\" ); } function castHeal() { console.log( \"preparing to cast a spell...\" ); // inconsistency console.log( \"reading the spell scroll: Heal...\" ); console.log( \"you summon healing energies, which make you feel better\" ); } Becomes: function readSpell(name) { console.log( \"preparing to cast a spell...\" ); console.log( `reading the spell scroll: ${ name } ...` ); } function castFireball() { readSpell( \"Fireball\" ); console.log( \"a massive sphere of flame flies towards the enemy!\" ); } function castHeal() { readSpell( \"Heal\" ); console.log( \"you summon healing energies, which make you feel better\" ); } Note In the first version you could modify one of the functions and forget to modify the other, introducing an inconsistency. The second version protects you from this. Panic early If you have a feeling that something might go wrong in your code, implement a sanity check to receive an immediate warning. Javascript is particularly notorious for pretending like everything is fine and continuing the execution with corrupt data (undefined, etc). MDN link: throw statement . Example class Player { constructor (health) { this .health = health; } receiveDamage(amount) { this .health -= amount; if ( this .health < 0 ) { this .health = 0 ; } } heal(amount) { this .health += amount; } getIsDead ( ) { if ( this .health < 0 ) { throw \"health should never be negative!\" ; // something clearly went wrong, no reason to continue execution! } return this .health == 0 ; } } Magic numbers When using numeric constants (for example, pi), create named constants instead of writing the values directly in your code. Example class Circle { constructor (radius){ this .radius = radius; } getCircumference(){ return this .radius * 2.0 * 3.1415 ; } getArea(){ return 3.14 * ( this .radius ** 2 ); } } Becomes: const PI = 3.1415 ; class Circle { constructor (radius){ this .radius = radius; } getCircumference(){ return this .radius * 2.0 * PI; } getArea(){ return PI * ( this .radius ** 2 ); } } Note In the first variant different precision was used for \\(\\pi\\) in different places. This can create confusion. Creating a constant ensures the value is always the same throughout the code.","title":"Clean code"},{"location":"For%20students%20%28JS%29/Clean%20code/#clean-code","text":"Some advice about keeping your code clean and manageable","title":"Clean code"},{"location":"For%20students%20%28JS%29/Clean%20code/#long-functions","text":"When a function becomes too long, extract parts of it into separate functions.","title":"Long functions"},{"location":"For%20students%20%28JS%29/Clean%20code/#example","text":"function DrawEverything(canvas) { // lots of code // ... // ... // ... } Becomes: function DrawEverything(canvas) { drawBackground(canvas); drawEnemies(canvas); drawPlayer(canvas); drawProjectiles(canvas); }","title":"Example"},{"location":"For%20students%20%28JS%29/Clean%20code/#big-classes","text":"Same as with the big functions, try to break them up.","title":"Big classes"},{"location":"For%20students%20%28JS%29/Clean%20code/#too-many-arguments","text":"If you have functions with 6+ arguments, create a class to group up related values.","title":"Too many arguments"},{"location":"For%20students%20%28JS%29/Clean%20code/#example_1","text":"function printDocument( paperSize, marginLeft, marginRight, marginTop, marginBotton, numCopies, resolution, text, fontColor, fontSize, fontFamily, lineSpacing, paragraphIndentation ) { // do the printing } Becomes: class Margin { constructor (left, right, top bottom) { this .left = left; this .right = right; this .top = top; this .bottom = bottom; } } class PrintParameters { constructor (paperSize, margin, numCopies, resolution) { this .paperSize = paperSize; this .margin = margin; this .numCopies = numCopies; this .resolution = resolution; } } class Font { constructor (color, size, family) { this .color = color; this .size = size; this .family = family; } } class DocumentFormat { constructor (font, lineSpacing, paragraphIndentation) { this .font = font; this .lineSpacing = lineSpacing; this .paragraphIndentation = paragraphIndentation; } } class TextDocument { constructor (text, format) { this .text = text; this .format = format; } } function printDocument(printParameters, textDocument) { // do the printing }","title":"Example"},{"location":"For%20students%20%28JS%29/Clean%20code/#too-many-attributes","text":"Similar to the previous issue, but instead of having too many function arguments, you have too many attributes in a class. When a class has too many attributes, group them into new classes.","title":"Too many attributes"},{"location":"For%20students%20%28JS%29/Clean%20code/#data-duplication","text":"Avoid having multiple variables holding copies of the same value. Also, if certain value can be trivially computed from existing variables, it's usually better to provide a function for computing it, instead of storing it in a variable.","title":"Data duplication"},{"location":"For%20students%20%28JS%29/Clean%20code/#example_2","text":"class Player { constructor (health) { this .health = health; this .isDead = false ; } receiveDamage(amount) { this .health -= amount; if ( this .health < 0 ) { this .health = 0 ; } if ( this .health == 0 ) { this .isDead = true ; } } heal(amount) { this .health += amount; if ( this .health > 0 ) { this .isDead = false ; } } } Becomes: class Player { constructor (health) { this .health = health; } receiveDamage(amount) { this .health -= amount; if ( this .health < 0 ) { this .health = 0 ; } } heal(amount) { this .health += amount; } getIsDead ( ) { return this .health <= 0 ; } } Note Second variant is shorter, because there is no need to update this.isDead every time health changes. In the second variant it is impossible for the value to be incorrect, as long as the function isDead( ) is correct. In the first variant forgetting to update this.isDead (or updating it incorrectly) will introduce a bug, which can be difficult to find.","title":"Example"},{"location":"For%20students%20%28JS%29/Clean%20code/#code-duplication-in-classes","text":"If you have multiple classes with similar methods and/or attributes, consider extracting the common part into a base class and using inheritance.","title":"Code duplication in classes"},{"location":"For%20students%20%28JS%29/Clean%20code/#example_3","text":"class Vector2 { constructor (x, y) { this .x = x; this .y = y; } } class Player { constructor (name){ this .position = new Vector2( 0 , 0 ); this .name = name; } move(offset){ this .position.x += offset.x; this .position.y += offset.y; } // Player-related methods // ... // ... } class Skeleton { constructor (){ this .position = new Vector2( 0 , 0 ); this .name = \"Skeleton\" ; } move(offset){ this .position.x += offset.x; this .position.y += offset.y; console.log( \"rattling of bones echoes through the dungeon\" ); } // Skeleton-related methods // ... // ... } class Slime { constructor (){ this .position = new Vector2( 0 , 0 ); this .name = \"Slime\" ; } move(offset){ this .position.x += offset.x; this .position.y += offset.y; } // Slime-related methods // ... // ... } Becomes: class Vector2 { constructor (x, y) { this .x = x; this .y = y; } } class Character { constructor (name){ this .position = new Vector2( 0 , 0 ); this .name = name; } move(offset){ this .position.x += offset.x; this .position.y += offset.y; } } class Player extends Character { constructor (name){ super (name); } // Player-related methods // ... // ... } class Skeleton extends Character { constructor (){ super ( \"Skeleton\" ); } move(offset){ super .move(offset); console.log( \"rattling of bones echoes through the dungeon\" ); } // Skeleton-related methods // ... // ... } class Slime extends Character { constructor (){ super ( \"Slime\" ); } // Slime-related methods // ... // ... }","title":"Example"},{"location":"For%20students%20%28JS%29/Clean%20code/#code-duplication-in-functions","text":"If you have multiple functions with similar code, consider extracting the common part into a separate function.","title":"Code duplication in functions"},{"location":"For%20students%20%28JS%29/Clean%20code/#example_4","text":"function castFireball() { console.log( \"preparing to cast...\" ); // inconsistency console.log( \"reading the spell scroll: Fireball...\" ); console.log( \"a massive sphere of flame flies towards the enemy!\" ); } function castHeal() { console.log( \"preparing to cast a spell...\" ); // inconsistency console.log( \"reading the spell scroll: Heal...\" ); console.log( \"you summon healing energies, which make you feel better\" ); } Becomes: function readSpell(name) { console.log( \"preparing to cast a spell...\" ); console.log( `reading the spell scroll: ${ name } ...` ); } function castFireball() { readSpell( \"Fireball\" ); console.log( \"a massive sphere of flame flies towards the enemy!\" ); } function castHeal() { readSpell( \"Heal\" ); console.log( \"you summon healing energies, which make you feel better\" ); } Note In the first version you could modify one of the functions and forget to modify the other, introducing an inconsistency. The second version protects you from this.","title":"Example"},{"location":"For%20students%20%28JS%29/Clean%20code/#panic-early","text":"If you have a feeling that something might go wrong in your code, implement a sanity check to receive an immediate warning. Javascript is particularly notorious for pretending like everything is fine and continuing the execution with corrupt data (undefined, etc). MDN link: throw statement .","title":"Panic early"},{"location":"For%20students%20%28JS%29/Clean%20code/#example_5","text":"class Player { constructor (health) { this .health = health; } receiveDamage(amount) { this .health -= amount; if ( this .health < 0 ) { this .health = 0 ; } } heal(amount) { this .health += amount; } getIsDead ( ) { if ( this .health < 0 ) { throw \"health should never be negative!\" ; // something clearly went wrong, no reason to continue execution! } return this .health == 0 ; } }","title":"Example"},{"location":"For%20students%20%28JS%29/Clean%20code/#magic-numbers","text":"When using numeric constants (for example, pi), create named constants instead of writing the values directly in your code.","title":"Magic numbers"},{"location":"For%20students%20%28JS%29/Clean%20code/#example_6","text":"class Circle { constructor (radius){ this .radius = radius; } getCircumference(){ return this .radius * 2.0 * 3.1415 ; } getArea(){ return 3.14 * ( this .radius ** 2 ); } } Becomes: const PI = 3.1415 ; class Circle { constructor (radius){ this .radius = radius; } getCircumference(){ return this .radius * 2.0 * PI; } getArea(){ return PI * ( this .radius ** 2 ); } } Note In the first variant different precision was used for \\(\\pi\\) in different places. This can create confusion. Creating a constant ensures the value is always the same throughout the code.","title":"Example"},{"location":"For%20students%20%28JS%29/Examples%20and%20snippets/","text":"Examples and snippets Repl.it Note To create your own editable copy in Repl.it , press Fork repl button (top right). keyboard input handling demo Seminar examples seminar 4 Combat log code demo seminar 5 Basic game, keyboard controls code demo seminar 6 Mouse drag, snap code demo seminar 7 Audio code demo Collisions code demo","title":"Examples and snippets"},{"location":"For%20students%20%28JS%29/Examples%20and%20snippets/#examples-and-snippets","text":"","title":"Examples and snippets"},{"location":"For%20students%20%28JS%29/Examples%20and%20snippets/#replit","text":"Note To create your own editable copy in Repl.it , press Fork repl button (top right). keyboard input handling demo","title":"Repl.it"},{"location":"For%20students%20%28JS%29/Examples%20and%20snippets/#seminar-examples","text":"","title":"Seminar examples"},{"location":"For%20students%20%28JS%29/Examples%20and%20snippets/#seminar-4","text":"","title":"seminar 4"},{"location":"For%20students%20%28JS%29/Examples%20and%20snippets/#combat-log","text":"code demo","title":"Combat log"},{"location":"For%20students%20%28JS%29/Examples%20and%20snippets/#seminar-5","text":"","title":"seminar 5"},{"location":"For%20students%20%28JS%29/Examples%20and%20snippets/#basic-game-keyboard-controls","text":"code demo","title":"Basic game, keyboard controls"},{"location":"For%20students%20%28JS%29/Examples%20and%20snippets/#seminar-6","text":"","title":"seminar 6"},{"location":"For%20students%20%28JS%29/Examples%20and%20snippets/#mouse-drag-snap","text":"code demo","title":"Mouse drag, snap"},{"location":"For%20students%20%28JS%29/Examples%20and%20snippets/#seminar-7","text":"","title":"seminar 7"},{"location":"For%20students%20%28JS%29/Examples%20and%20snippets/#audio","text":"code demo","title":"Audio"},{"location":"For%20students%20%28JS%29/Examples%20and%20snippets/#collisions","text":"code demo","title":"Collisions"},{"location":"For%20students%20%28JS%29/JS%20tricks/","text":"JS tricks Note The same result could be achieved without using these constructs, albeit the code would be longer and messier. For loops For of Iterates over values. let arr = [ 10 , 20 , 30 ]; for ( const value of arr) { console.log(value); } For in Iterates over indices. let arr = [ 10 , 20 , 30 ]; for ( const i in arr) { console.log(arr[i]); } let dict = { red : \"rgb(255,0,0)\" , green : \"rgb(0,255,0)\" , blue : \"rgb(0,0,255)\" } for ( const i in dict) { console.log(dict[i]); } For each Runs the given function on every value. let arr = [ 10 , 20 , 30 ]; arr.forEach( (val) => { console.log(val); } ); Note Mozilla Developer Network \u2014 for..of Mozilla Developer Network \u2014 for..in Mozilla Developer Network \u2014 Array.prototype.forEach() Template strings Conveniently insert variables into your strings. Example let foo = 5 ; console.log( `the value of foo is: ${ foo } ` ); // \"the value of foo is: 5\" You can also do this: let foo = 5 ; console.log( `foo to the power of 3 is: ${ foo ** 3 } ` ); // foo to the power of 3 is: 125 let human = { name : \"Jack\" , age : 13 } console.log( ` ${ human.name } is ${ human.age } years old` ); // Jack is 13 years old Note Mozilla Developer Network \u2014 Template strings Destructuring assignment Destructuring assignment syntax allows unpacking values from arrays, and properties from objects. This has several convenient applications, such as swapping variables without creating a temporary variable, or creating functions with named arguments. Swap variables let a = 1 , b = 2 ; [a,b] = [b,a]; // a = 2 // b = 1 Named function arguments With named function arguments you don't have to remember the order of arguments, when calling a function. function sayTimes( { phrase, times } ){ for ( let i = 0 ; i < times; i ++ ){ console.log(phrase); } } sayTimes( { times : 5 , phrase : \"Repetition is the mother of all learning\" } ); Note Mozilla Developer Network \u2014 Destructuring assignment Static methods and attributes Static methods and attributes are attached to the class itself, not a particular instance of the class. Example class Student { constructor (name) { this .name = name; Student.all.push( this ); } static GreetAll() { Student.all.forEach((student) => { console.log( `Hello, ${ student.name } ` ); }) } // static initialization static { Student.all = []; console.log( \"static initialization called\" ); } } const ann = new Student( \"Ann\" ); const jack = new Student( \"Jack\" ); const bob = new Student( \"Bob\" ); const eve = new Student( \"Eve\" ); Student.GreetAll(); /* \"static initialization called\" \"Hello, Ann\" \"Hello, Jack\" \"Hello, Bob\" \"Hello, Eve\" */ Note Mozilla Developer Network \u2014 static Optional chaining Normally, if you try to call a method, or read an attribute, which does not exist, you'd raise an error. With optional chaining you can call a method, or receive an attribute (if it exists), and move on without raising an error, if it doesn't. This is useful, when iterating over an array, where some objects might be null , or lack the relevant method/attribute. Example class Pet { constructor (name){ this .name = name; } call(){ console.log( `Come here, ${ this .name } !` ); } } let petOwners = [ { name : \"Steve\" , cat : new Pet( \"couch\" ) }, { name : \"Glen\" , dog : new Pet( \"Woofer\" ) }, null ] for ( let petOwner of petOwners) { petOwner ? .dog ? .call(); // if petOwner == null, do nothing // if petOwner doesn't have a dog, do nothing } Note Mozilla Developer Network \u2014 Optional chaining Console output Console.table Display objects and their properties in console, formatted as a table. Console.dir Display an interactive list of properties of a JavaScript object. Example let arr = [ { name : \"Ivy\" , age : 29 }, { name : \"Dilan\" , age : 42 , cat : { name : \"Whiskers\" , age : 3 } } ]; console.table(arr); (index) name age cat 0 Ivy 29 1 Dilan 42 Object { name: \"Whiskers\", age: 3 } Note Mozilla Developer Network \u2014 console.table( ) , console.dir( ) Spread syntax (...) Array unpacking function sum(x, y, z) { return x + y + z; } const numbers = [ 1 , 2 , 3 ]; console.log( sum(...numbers) ); // 6 Merging arrays let arr = [ 0 , 1 , 2 ]; let newNumber = 12 ; arr = [...arr, newNumber]; Assigning variable number of elements Using Destructuring assignment const [a, ...b] = [ 1 , 2 , 3 ]; // a = 1 // b = [2, 3] const [a, ...b] = [ 1 , 2 , 3 , 4 , 5 ]; // a = 1 // b = [2, 3, 4, 5] Shallow copy let obj = { attr_1 : \"a\" , attr_2 : \"b\" , }; let copy = { ...obj, newAttr : \"c\" }; console.log(obj); /* attr_1: \"a\", attr_2: \"b\" */ console.log(copy); /* attr_1: \"a\", attr_2: \"b\", newAttr: \"c\" */ Warning Shallow copy sets attributes of the target object identical to the source object. This means, that if the source object had a reference (non- primitive ) attribute, the target object will be referencing the same thing! There are 7 primitive data types: string, number, bigint, boolean, undefined, symbol, and null. Removing duplicates let arr = [ 1 , 1 , 2 , 2 , 3 , 3 , 4 , 4 , 4 , 4 , 4 , 5 , 5 , 5 , 5 , 5 ]; arr = [... new Set (arr)]; console.log(arr); // [1,2,3,4,5] Note Mozilla Developer Network \u2014 Spread syntax (...) Array.map Applies the given function to every element of an array, then returns results as a new array. Example let arr = [ 1 , 2 , 3 ]; editedArr = arr.map( (x) => x +1 ); // editedArr = [2,3,4] You can nest array.map calls for more complex scenarios: let grid = [ [ 1 , 2 , 3 ], [ 4 , 5 , 6 ], [ 7 , 8 , 9 ] ]; let editedGrid = grid.map( (row) => row.map( (item) => item - 1 ) ) console.table(editedGrid); 0 1 2 3 4 5 6 7 8 Combined with spread syntax : let grid = [ [ 1 , 2 , 3 ], [ 4 , 5 , 6 ], [ 7 , 8 , 9 ] ]; let editedGrid = grid.map( (row) => [ ...row.map( (item) => item - 1 ), 0 ] ) console.table(editedGrid); 0 1 2 0 3 4 5 0 6 7 8 0","title":"JS tricks"},{"location":"For%20students%20%28JS%29/JS%20tricks/#js-tricks","text":"Note The same result could be achieved without using these constructs, albeit the code would be longer and messier.","title":"JS tricks"},{"location":"For%20students%20%28JS%29/JS%20tricks/#for-loops","text":"","title":"For loops"},{"location":"For%20students%20%28JS%29/JS%20tricks/#for-of","text":"Iterates over values. let arr = [ 10 , 20 , 30 ]; for ( const value of arr) { console.log(value); }","title":"For of"},{"location":"For%20students%20%28JS%29/JS%20tricks/#for-in","text":"Iterates over indices. let arr = [ 10 , 20 , 30 ]; for ( const i in arr) { console.log(arr[i]); } let dict = { red : \"rgb(255,0,0)\" , green : \"rgb(0,255,0)\" , blue : \"rgb(0,0,255)\" } for ( const i in dict) { console.log(dict[i]); }","title":"For in"},{"location":"For%20students%20%28JS%29/JS%20tricks/#for-each","text":"Runs the given function on every value. let arr = [ 10 , 20 , 30 ]; arr.forEach( (val) => { console.log(val); } ); Note Mozilla Developer Network \u2014 for..of Mozilla Developer Network \u2014 for..in Mozilla Developer Network \u2014 Array.prototype.forEach()","title":"For each"},{"location":"For%20students%20%28JS%29/JS%20tricks/#template-strings","text":"Conveniently insert variables into your strings.","title":"Template strings"},{"location":"For%20students%20%28JS%29/JS%20tricks/#example","text":"let foo = 5 ; console.log( `the value of foo is: ${ foo } ` ); // \"the value of foo is: 5\" You can also do this: let foo = 5 ; console.log( `foo to the power of 3 is: ${ foo ** 3 } ` ); // foo to the power of 3 is: 125 let human = { name : \"Jack\" , age : 13 } console.log( ` ${ human.name } is ${ human.age } years old` ); // Jack is 13 years old Note Mozilla Developer Network \u2014 Template strings","title":"Example"},{"location":"For%20students%20%28JS%29/JS%20tricks/#destructuring-assignment","text":"Destructuring assignment syntax allows unpacking values from arrays, and properties from objects. This has several convenient applications, such as swapping variables without creating a temporary variable, or creating functions with named arguments.","title":"Destructuring assignment"},{"location":"For%20students%20%28JS%29/JS%20tricks/#swap-variables","text":"let a = 1 , b = 2 ; [a,b] = [b,a]; // a = 2 // b = 1","title":"Swap variables"},{"location":"For%20students%20%28JS%29/JS%20tricks/#named-function-arguments","text":"With named function arguments you don't have to remember the order of arguments, when calling a function. function sayTimes( { phrase, times } ){ for ( let i = 0 ; i < times; i ++ ){ console.log(phrase); } } sayTimes( { times : 5 , phrase : \"Repetition is the mother of all learning\" } ); Note Mozilla Developer Network \u2014 Destructuring assignment","title":"Named function arguments"},{"location":"For%20students%20%28JS%29/JS%20tricks/#static-methods-and-attributes","text":"Static methods and attributes are attached to the class itself, not a particular instance of the class.","title":"Static methods and attributes"},{"location":"For%20students%20%28JS%29/JS%20tricks/#example_1","text":"class Student { constructor (name) { this .name = name; Student.all.push( this ); } static GreetAll() { Student.all.forEach((student) => { console.log( `Hello, ${ student.name } ` ); }) } // static initialization static { Student.all = []; console.log( \"static initialization called\" ); } } const ann = new Student( \"Ann\" ); const jack = new Student( \"Jack\" ); const bob = new Student( \"Bob\" ); const eve = new Student( \"Eve\" ); Student.GreetAll(); /* \"static initialization called\" \"Hello, Ann\" \"Hello, Jack\" \"Hello, Bob\" \"Hello, Eve\" */ Note Mozilla Developer Network \u2014 static","title":"Example"},{"location":"For%20students%20%28JS%29/JS%20tricks/#optional-chaining","text":"Normally, if you try to call a method, or read an attribute, which does not exist, you'd raise an error. With optional chaining you can call a method, or receive an attribute (if it exists), and move on without raising an error, if it doesn't. This is useful, when iterating over an array, where some objects might be null , or lack the relevant method/attribute.","title":"Optional chaining"},{"location":"For%20students%20%28JS%29/JS%20tricks/#example_2","text":"class Pet { constructor (name){ this .name = name; } call(){ console.log( `Come here, ${ this .name } !` ); } } let petOwners = [ { name : \"Steve\" , cat : new Pet( \"couch\" ) }, { name : \"Glen\" , dog : new Pet( \"Woofer\" ) }, null ] for ( let petOwner of petOwners) { petOwner ? .dog ? .call(); // if petOwner == null, do nothing // if petOwner doesn't have a dog, do nothing } Note Mozilla Developer Network \u2014 Optional chaining","title":"Example"},{"location":"For%20students%20%28JS%29/JS%20tricks/#console-output","text":"Console.table Display objects and their properties in console, formatted as a table. Console.dir Display an interactive list of properties of a JavaScript object.","title":"Console output"},{"location":"For%20students%20%28JS%29/JS%20tricks/#example_3","text":"let arr = [ { name : \"Ivy\" , age : 29 }, { name : \"Dilan\" , age : 42 , cat : { name : \"Whiskers\" , age : 3 } } ]; console.table(arr); (index) name age cat 0 Ivy 29 1 Dilan 42 Object { name: \"Whiskers\", age: 3 } Note Mozilla Developer Network \u2014 console.table( ) , console.dir( )","title":"Example"},{"location":"For%20students%20%28JS%29/JS%20tricks/#spread-syntax","text":"","title":"Spread syntax (...)"},{"location":"For%20students%20%28JS%29/JS%20tricks/#array-unpacking","text":"function sum(x, y, z) { return x + y + z; } const numbers = [ 1 , 2 , 3 ]; console.log( sum(...numbers) ); // 6","title":"Array unpacking"},{"location":"For%20students%20%28JS%29/JS%20tricks/#merging-arrays","text":"let arr = [ 0 , 1 , 2 ]; let newNumber = 12 ; arr = [...arr, newNumber];","title":"Merging arrays"},{"location":"For%20students%20%28JS%29/JS%20tricks/#assigning-variable-number-of-elements","text":"Using Destructuring assignment const [a, ...b] = [ 1 , 2 , 3 ]; // a = 1 // b = [2, 3] const [a, ...b] = [ 1 , 2 , 3 , 4 , 5 ]; // a = 1 // b = [2, 3, 4, 5]","title":"Assigning variable number of elements"},{"location":"For%20students%20%28JS%29/JS%20tricks/#shallow-copy","text":"let obj = { attr_1 : \"a\" , attr_2 : \"b\" , }; let copy = { ...obj, newAttr : \"c\" }; console.log(obj); /* attr_1: \"a\", attr_2: \"b\" */ console.log(copy); /* attr_1: \"a\", attr_2: \"b\", newAttr: \"c\" */ Warning Shallow copy sets attributes of the target object identical to the source object. This means, that if the source object had a reference (non- primitive ) attribute, the target object will be referencing the same thing! There are 7 primitive data types: string, number, bigint, boolean, undefined, symbol, and null.","title":"Shallow copy"},{"location":"For%20students%20%28JS%29/JS%20tricks/#removing-duplicates","text":"let arr = [ 1 , 1 , 2 , 2 , 3 , 3 , 4 , 4 , 4 , 4 , 4 , 5 , 5 , 5 , 5 , 5 ]; arr = [... new Set (arr)]; console.log(arr); // [1,2,3,4,5] Note Mozilla Developer Network \u2014 Spread syntax (...)","title":"Removing duplicates"},{"location":"For%20students%20%28JS%29/JS%20tricks/#arraymap","text":"Applies the given function to every element of an array, then returns results as a new array.","title":"Array.map"},{"location":"For%20students%20%28JS%29/JS%20tricks/#example_4","text":"let arr = [ 1 , 2 , 3 ]; editedArr = arr.map( (x) => x +1 ); // editedArr = [2,3,4] You can nest array.map calls for more complex scenarios: let grid = [ [ 1 , 2 , 3 ], [ 4 , 5 , 6 ], [ 7 , 8 , 9 ] ]; let editedGrid = grid.map( (row) => row.map( (item) => item - 1 ) ) console.table(editedGrid); 0 1 2 3 4 5 6 7 8 Combined with spread syntax : let grid = [ [ 1 , 2 , 3 ], [ 4 , 5 , 6 ], [ 7 , 8 , 9 ] ]; let editedGrid = grid.map( (row) => [ ...row.map( (item) => item - 1 ), 0 ] ) console.table(editedGrid); 0 1 2 0 3 4 5 0 6 7 8 0","title":"Example"}]}