import{_ as s,o as a,c as n,a as l}from"./chunks/framework.oytdgtbb.js";const C=JSON.parse('{"title":"","description":"","frontmatter":{"Title":"JS cheat sheet"},"headers":[],"relativePath":"students/js/cheat.md","filePath":"students/js/cheat.md"}'),p={name:"students/js/cheat.md"},o="/assets/shallow copy.C9HKKWmt.png",e=l(`<h2 id="for-loops" tabindex="-1">For loops <a class="header-anchor" href="#for-loops" aria-label="Permalink to &quot;For loops&quot;">​</a></h2><h3 id="for-of" tabindex="-1">For of <a class="header-anchor" href="#for-of" aria-label="Permalink to &quot;For of&quot;">​</a></h3><p>Iterates over values in arrays.</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code"><code><span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> arr </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [</span><span style="color:#005CC5;">10</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">20</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">30</span><span style="color:#24292E;">];</span></span>
<span class="line"><span style="color:#24292E;">    </span></span>
<span class="line"><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">const</span><span style="color:#005CC5;"> value</span><span style="color:#D73A49;"> of</span><span style="color:#24292E;"> arr) {</span></span>
<span class="line"><span style="color:#24292E;">   console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(value);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h3 id="for-in" tabindex="-1">For in <a class="header-anchor" href="#for-in" aria-label="Permalink to &quot;For in&quot;">​</a></h3><p>Iterates over indices in arrays and keys in objects.</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code"><code><span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> arr </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [</span><span style="color:#005CC5;">10</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">20</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">30</span><span style="color:#24292E;">];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">const</span><span style="color:#005CC5;"> i</span><span style="color:#D73A49;"> in</span><span style="color:#24292E;"> arr) {</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(arr[i]);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code"><code><span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> dict </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    red:    </span><span style="color:#032F62;">&quot;rgb(255,0,0)&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    green:  </span><span style="color:#032F62;">&quot;rgb(0,255,0)&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    blue:   </span><span style="color:#032F62;">&quot;rgb(0,0,255)&quot;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">const</span><span style="color:#005CC5;"> i</span><span style="color:#D73A49;"> in</span><span style="color:#24292E;"> dict) {</span></span>
<span class="line"><span style="color:#24292E;">    console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(dict[i]);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h3 id="array-foreach" tabindex="-1">Array.forEach() <a class="header-anchor" href="#array-foreach" aria-label="Permalink to &quot;Array.forEach()&quot;">​</a></h3><p>Runs the given function on every value in the array.</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code"><code><span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> arr </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [</span><span style="color:#005CC5;">10</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">20</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">30</span><span style="color:#24292E;">];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">arr.</span><span style="color:#6F42C1;">forEach</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">	(</span><span style="color:#E36209;">val</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  	    console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(val);</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"><span style="color:#24292E;">);</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><ul><li>Mozilla Developer Network — <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...of" target="_blank" rel="noreferrer">for..of</a></li><li>Mozilla Developer Network — <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...in" target="_blank" rel="noreferrer">for..in</a></li><li>Mozilla Developer Network — <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach" target="_blank" rel="noreferrer">Array.prototype.forEach()</a></li></ul></div><h2 id="template-strings" tabindex="-1">Template strings <a class="header-anchor" href="#template-strings" aria-label="Permalink to &quot;Template strings&quot;">​</a></h2><p>Conveniently insert variables into your strings.</p><h5 id="example" tabindex="-1">Example <a class="header-anchor" href="#example" aria-label="Permalink to &quot;Example&quot;">​</a></h5><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code"><code><span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> foo </span><span style="color:#D73A49;">=</span><span style="color:#005CC5;"> 5</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">\`the value of foo is: \${</span><span style="color:#24292E;">foo</span><span style="color:#032F62;">}\`</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#6A737D;">// &quot;the value of foo is: 5&quot;</span></span></code></pre></div><p>You can also do this:</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code"><code><span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> foo </span><span style="color:#D73A49;">=</span><span style="color:#005CC5;"> 5</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">\`foo to the power of 3 is: \${</span><span style="color:#24292E;">foo</span><span style="color:#D73A49;"> **</span><span style="color:#005CC5;"> 3</span><span style="color:#032F62;">}\`</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#6A737D;">// foo to the power of 3 is: 125</span></span></code></pre></div><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code"><code><span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> human </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    name: </span><span style="color:#032F62;">&quot;Jack&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    age: </span><span style="color:#005CC5;">13</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">\`\${</span><span style="color:#24292E;">human</span><span style="color:#032F62;">.</span><span style="color:#24292E;">name</span><span style="color:#032F62;">} is \${</span><span style="color:#24292E;">human</span><span style="color:#032F62;">.</span><span style="color:#24292E;">age</span><span style="color:#032F62;">} years old\`</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#6A737D;">// Jack is 13 years old</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>Mozilla Developer Network — <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals" target="_blank" rel="noreferrer">template strings</a></p></div><h2 id="destructuring-assignment" tabindex="-1">Destructuring assignment <a class="header-anchor" href="#destructuring-assignment" aria-label="Permalink to &quot;Destructuring assignment&quot;">​</a></h2><p>Destructuring assignment syntax allows to unpack values from arrays and properties from objects. This has several convenient applications, such as swapping variables without creating a temporary variable, creating functions with named arguments, and creating a copy of an object or array with added values.</p><h3 id="swap-variables" tabindex="-1">Swap variables <a class="header-anchor" href="#swap-variables" aria-label="Permalink to &quot;Swap variables&quot;">​</a></h3><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code"><code><span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> a </span><span style="color:#D73A49;">=</span><span style="color:#005CC5;"> 1</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    b </span><span style="color:#D73A49;">=</span><span style="color:#005CC5;"> 2</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">[a,b] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [b,a];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// a = 2</span></span>
<span class="line"><span style="color:#6A737D;">// b = 1</span></span></code></pre></div><h3 id="named-function-arguments" tabindex="-1">Named function arguments <a class="header-anchor" href="#named-function-arguments" aria-label="Permalink to &quot;Named function arguments&quot;">​</a></h3><p>With named function arguments you don&#39;t have to remember the order of arguments when calling a function.</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code"><code><span class="line"><span style="color:#D73A49;">function</span><span style="color:#6F42C1;"> sayTimes</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">    {</span></span>
<span class="line"><span style="color:#E36209;">        phrase</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#E36209;">        times</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">){</span></span>
<span class="line"><span style="color:#D73A49;">    for</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#005CC5;"> 0</span><span style="color:#24292E;">; i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> times; i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">){</span></span>
<span class="line"><span style="color:#24292E;">        console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(phrase);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">sayTimes</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">    {</span></span>
<span class="line"><span style="color:#24292E;">        times: </span><span style="color:#005CC5;">5</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        phrase: </span><span style="color:#032F62;">&quot;Repetition is the mother of all learning&quot;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">);</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>Mozilla Developer Network — <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment" target="_blank" rel="noreferrer">destructuring assignment</a></p></div><h2 id="static-methods-and-attributes" tabindex="-1">Static methods and attributes <a class="header-anchor" href="#static-methods-and-attributes" aria-label="Permalink to &quot;Static methods and attributes&quot;">​</a></h2><p>Static methods and attributes are attached to the class itself, not a particular instance of the class. In other words, there is only one instance of a static attribute in the entire application which is shared by all instances of the class.</p><h4 id="example-1" tabindex="-1">Example <a class="header-anchor" href="#example-1" aria-label="Permalink to &quot;Example&quot;">​</a></h4><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code"><code><span class="line"><span style="color:#D73A49;">class</span><span style="color:#6F42C1;"> Student</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#6A737D;">	// static initialization</span></span>
<span class="line"><span style="color:#6A737D;">	// will be called automatically, only once</span></span>
<span class="line"><span style="color:#D73A49;">	static</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">		Student.all </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [];</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">	constructor</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">name</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#005CC5;">		this</span><span style="color:#24292E;">.name </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> name;</span></span>
<span class="line"><span style="color:#24292E;">		Student.all.</span><span style="color:#6F42C1;">push</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">	static</span><span style="color:#6F42C1;"> GreetAll</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">		Student.all.</span><span style="color:#6F42C1;">forEach</span><span style="color:#24292E;">((</span><span style="color:#E36209;">student</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">			console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">\`Hello, \${</span><span style="color:#24292E;">student</span><span style="color:#032F62;">.</span><span style="color:#24292E;">name</span><span style="color:#032F62;">}\`</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">		})</span></span>
<span class="line"><span style="color:#24292E;">	}	</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#005CC5;"> ann</span><span style="color:#D73A49;"> =</span><span style="color:#D73A49;"> new</span><span style="color:#6F42C1;"> Student</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Ann&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#005CC5;"> jack</span><span style="color:#D73A49;"> =</span><span style="color:#D73A49;"> new</span><span style="color:#6F42C1;"> Student</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Jack&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#005CC5;"> bob</span><span style="color:#D73A49;"> =</span><span style="color:#D73A49;"> new</span><span style="color:#6F42C1;"> Student</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Bob&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#005CC5;"> eve</span><span style="color:#D73A49;"> =</span><span style="color:#D73A49;"> new</span><span style="color:#6F42C1;"> Student</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Eve&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">Student.</span><span style="color:#6F42C1;">GreetAll</span><span style="color:#24292E;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">/*</span></span>
<span class="line"><span style="color:#6A737D;">	&quot;static initialization called&quot;</span></span>
<span class="line"><span style="color:#6A737D;">	&quot;Hello, Ann&quot;</span></span>
<span class="line"><span style="color:#6A737D;">	&quot;Hello, Jack&quot;</span></span>
<span class="line"><span style="color:#6A737D;">	&quot;Hello, Bob&quot;</span></span>
<span class="line"><span style="color:#6A737D;">	&quot;Hello, Eve&quot;</span></span>
<span class="line"><span style="color:#6A737D;">*/</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>Mozilla Developer Network — <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes/static" target="_blank" rel="noreferrer">static</a>, <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes/Static_initialization_blocks" target="_blank" rel="noreferrer">static initialization blocks</a></p></div><h2 id="optional-chaining" tabindex="-1">Optional chaining <a class="header-anchor" href="#optional-chaining" aria-label="Permalink to &quot;Optional chaining&quot;">​</a></h2><p>Normally, if you try to call a method or read an attribute which does not exist, you&#39;d raise an error. With optional chaining you can call a method or receive an attribute (if it exists), and move on without raising an error if it doesn&#39;t. This is useful when iterating over an array, where some objects might have properties set to <code>null</code> or <code>undefined</code>.</p><h4 id="example-2" tabindex="-1">Example <a class="header-anchor" href="#example-2" aria-label="Permalink to &quot;Example&quot;">​</a></h4><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code"><code><span class="line"><span style="color:#D73A49;">class</span><span style="color:#6F42C1;"> Pet</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#D73A49;">    constructor</span><span style="color:#24292E;">(</span><span style="color:#E36209;">name</span><span style="color:#24292E;">){</span></span>
<span class="line"><span style="color:#005CC5;">        this</span><span style="color:#24292E;">.name </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> name;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">    call</span><span style="color:#24292E;">(){</span></span>
<span class="line"><span style="color:#24292E;">        console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">\`Come here, \${</span><span style="color:#005CC5;">this</span><span style="color:#032F62;">.</span><span style="color:#24292E;">name</span><span style="color:#032F62;">}!\`</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> petOwners </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [</span></span>
<span class="line"><span style="color:#24292E;">    {</span></span>
<span class="line"><span style="color:#24292E;">        name: </span><span style="color:#032F62;">&quot;Steve&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        cat: </span><span style="color:#D73A49;">new</span><span style="color:#6F42C1;"> Pet</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;couch&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    },</span></span>
<span class="line"><span style="color:#24292E;">    {</span></span>
<span class="line"><span style="color:#24292E;">        name: </span><span style="color:#032F62;">&quot;Glen&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        dog: </span><span style="color:#D73A49;">new</span><span style="color:#6F42C1;"> Pet</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Woofer&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    },</span></span>
<span class="line"><span style="color:#005CC5;">    null</span></span>
<span class="line"><span style="color:#24292E;">]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> petOwner </span><span style="color:#D73A49;">of</span><span style="color:#24292E;"> petOwners) {</span></span>
<span class="line"><span style="color:#24292E;">    petOwner?.dog?.</span><span style="color:#6F42C1;">call</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#6A737D;">    // if petOwner == null, assume that .dog is undefined</span></span>
<span class="line"><span style="color:#6A737D;">    // if .dog is undefined, do nothing</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>Mozilla Developer Network — <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Optional_chaining" target="_blank" rel="noreferrer">optional chaining</a></p></div><h2 id="console-output" tabindex="-1">Console output <a class="header-anchor" href="#console-output" aria-label="Permalink to &quot;Console output&quot;">​</a></h2><dl><dt>Console.table</dt><dd>Display objects and their properties in console, formatted as a table.</dd><dt>Console.dir</dt><dd>Display an interactive list of properties of a JavaScript object.</dd></dl><h4 id="example-3" tabindex="-1">Example <a class="header-anchor" href="#example-3" aria-label="Permalink to &quot;Example&quot;">​</a></h4><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code"><code><span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> arr </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [</span></span>
<span class="line"><span style="color:#24292E;">	{</span></span>
<span class="line"><span style="color:#24292E;">    	name: </span><span style="color:#032F62;">&quot;Ivy&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">      	age: </span><span style="color:#005CC5;">29</span></span>
<span class="line"><span style="color:#24292E;">	},</span></span>
<span class="line"><span style="color:#24292E;">   {</span></span>
<span class="line"><span style="color:#24292E;">     	name: </span><span style="color:#032F62;">&quot;Dilan&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">     	age: </span><span style="color:#005CC5;">42</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">     	cat: {</span></span>
<span class="line"><span style="color:#24292E;">        	name: </span><span style="color:#032F62;">&quot;Whiskers&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">          	age: </span><span style="color:#005CC5;">3</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">   }</span></span>
<span class="line"><span style="color:#24292E;">];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">table</span><span style="color:#24292E;">(arr);</span></span></code></pre></div><p>Output:</p><table><thead><tr><th>(index)</th><th>name</th><th>age</th><th>cat</th></tr></thead><tbody><tr><td>0</td><td>Ivy</td><td>29</td><td></td></tr><tr><td>1</td><td>Dilan</td><td>42</td><td><code>Object { name: &quot;Whiskers&quot;, age: 3 }</code></td></tr></tbody></table><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>Mozilla Developer Network — <a href="https://developer.mozilla.org/en-US/docs/Web/API/Console/table" target="_blank" rel="noreferrer">console.table( )</a>, <a href="https://developer.mozilla.org/en-US/docs/Web/API/console/dir" target="_blank" rel="noreferrer">console.dir( )</a></p></div><h2 id="spread-syntax" tabindex="-1">Spread syntax (...) <a class="header-anchor" href="#spread-syntax" aria-label="Permalink to &quot;Spread syntax (...)&quot;">​</a></h2><h3 id="array-unpacking" tabindex="-1">Array unpacking <a class="header-anchor" href="#array-unpacking" aria-label="Permalink to &quot;Array unpacking&quot;">​</a></h3><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code"><code><span class="line"><span style="color:#D73A49;">function</span><span style="color:#6F42C1;"> sum</span><span style="color:#24292E;">(</span><span style="color:#E36209;">x</span><span style="color:#24292E;">, </span><span style="color:#E36209;">y</span><span style="color:#24292E;">, </span><span style="color:#E36209;">z</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#D73A49;">  return</span><span style="color:#24292E;"> x </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> y </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> z;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#005CC5;"> numbers</span><span style="color:#D73A49;"> =</span><span style="color:#24292E;"> [</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#6F42C1;">    sum</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">...</span><span style="color:#24292E;">numbers)</span></span>
<span class="line"><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#6A737D;">// 6</span></span></code></pre></div><h3 id="merging-arrays" tabindex="-1">Merging arrays <a class="header-anchor" href="#merging-arrays" aria-label="Permalink to &quot;Merging arrays&quot;">​</a></h3><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code"><code><span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> arr </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">];</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> newNumber </span><span style="color:#D73A49;">=</span><span style="color:#005CC5;"> 12</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">arr </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [</span><span style="color:#D73A49;">...</span><span style="color:#24292E;">arr, newNumber];</span></span></code></pre></div><h3 id="assigning-a-variable-number-of-elements" tabindex="-1">Assigning a variable number of elements <a class="header-anchor" href="#assigning-a-variable-number-of-elements" aria-label="Permalink to &quot;Assigning a variable number of elements&quot;">​</a></h3><p>Using <a href="#destructuring-assignment">Destructuring assignment</a></p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> [</span><span style="color:#005CC5;">a</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">...</span><span style="color:#005CC5;">b</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">];</span></span>
<span class="line"><span style="color:#6A737D;">// a = 1</span></span>
<span class="line"><span style="color:#6A737D;">// b = [2, 3]</span></span></code></pre></div><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> [</span><span style="color:#005CC5;">a</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">...</span><span style="color:#005CC5;">b</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">4</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">5</span><span style="color:#24292E;">];</span></span>
<span class="line"><span style="color:#6A737D;">// a = 1</span></span>
<span class="line"><span style="color:#6A737D;">// b = [2, 3, 4, 5]</span></span></code></pre></div><h3 id="shallow-copy" tabindex="-1">Shallow copy <a class="header-anchor" href="#shallow-copy" aria-label="Permalink to &quot;Shallow copy&quot;">​</a></h3><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code"><code><span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> obj </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    attr_1: </span><span style="color:#032F62;">&quot;a&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    attr_2: </span><span style="color:#032F62;">&quot;b&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> copy </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#D73A49;">    ...</span><span style="color:#24292E;">obj,</span></span>
<span class="line"><span style="color:#24292E;">    newAttr :</span><span style="color:#032F62;">&quot;c&quot;</span></span>
<span class="line"><span style="color:#24292E;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(obj);</span></span>
<span class="line"><span style="color:#6A737D;">/*</span></span>
<span class="line"><span style="color:#6A737D;">    attr_1: &quot;a&quot;,</span></span>
<span class="line"><span style="color:#6A737D;">    attr_2: &quot;b&quot;</span></span>
<span class="line"><span style="color:#6A737D;">*/</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(copy);</span></span>
<span class="line"><span style="color:#6A737D;">/*</span></span>
<span class="line"><span style="color:#6A737D;">    attr_1:  &quot;a&quot;,</span></span>
<span class="line"><span style="color:#6A737D;">    attr_2:  &quot;b&quot;,</span></span>
<span class="line"><span style="color:#6A737D;">    newAttr: &quot;c&quot;</span></span>
<span class="line"><span style="color:#6A737D;">*/</span></span></code></pre></div><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>Shallow copy sets attributes of the target object identical to the source object.</p><p>This means, that if the source object had a reference (i.e. non–<a href="https://developer.mozilla.org/en-US/docs/Glossary/Primitive" target="_blank" rel="noreferrer">primitive</a>) attribute, the target object will be referencing the same thing! There are 7 primitive data types: string, number, bigint, boolean, undefined, symbol, and null.</p><figure><img src="`+o+`"></figure></div><h3 id="removing-duplicates" tabindex="-1">Removing duplicates <a class="header-anchor" href="#removing-duplicates" aria-label="Permalink to &quot;Removing duplicates&quot;">​</a></h3><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code"><code><span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> arr </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [</span></span>
<span class="line"><span style="color:#005CC5;">  1</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#005CC5;">  2</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#005CC5;">  3</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">3</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#005CC5;">  4</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">4</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">4</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">4</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">4</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#005CC5;">  5</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">5</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">5</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">5</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">5</span></span>
<span class="line"><span style="color:#24292E;">];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">arr </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [</span><span style="color:#D73A49;">...new</span><span style="color:#6F42C1;"> Set</span><span style="color:#24292E;">(arr)];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(arr);</span></span>
<span class="line"><span style="color:#6A737D;">// [1,2,3,4,5]</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>Mozilla Developer Network — <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax" target="_blank" rel="noreferrer">Spread syntax (...)</a></p></div><h2 id="array-map" tabindex="-1">Array.map() <a class="header-anchor" href="#array-map" aria-label="Permalink to &quot;Array.map()&quot;">​</a></h2><p>Applies the given function to every element of an array, then returns results as a new array.</p><h4 id="example-4" tabindex="-1">Example <a class="header-anchor" href="#example-4" aria-label="Permalink to &quot;Example&quot;">​</a></h4><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code"><code><span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> arr </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">3</span><span style="color:#24292E;">];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">editedArr </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> arr.</span><span style="color:#6F42C1;">map</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">    (</span><span style="color:#E36209;">x</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> x</span><span style="color:#D73A49;">+</span><span style="color:#005CC5;">1</span></span>
<span class="line"><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#6A737D;">// editedArr = [2,3,4]</span></span></code></pre></div><p>You can nest <code>array.map</code> calls for more complex scenarios:</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code"><code><span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> grid </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [</span></span>
<span class="line"><span style="color:#24292E;">    [</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">3</span><span style="color:#24292E;">],</span></span>
<span class="line"><span style="color:#24292E;">    [</span><span style="color:#005CC5;">4</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">5</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">6</span><span style="color:#24292E;">],</span></span>
<span class="line"><span style="color:#24292E;">    [</span><span style="color:#005CC5;">7</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">8</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">9</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#24292E;">];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> editedGrid </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> grid.</span><span style="color:#6F42C1;">map</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">    (</span><span style="color:#E36209;">row</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> row.</span><span style="color:#6F42C1;">map</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">        (</span><span style="color:#E36209;">item</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> item </span><span style="color:#D73A49;">-</span><span style="color:#005CC5;"> 1</span></span>
<span class="line"><span style="color:#24292E;">    )</span></span>
<span class="line"><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">table</span><span style="color:#24292E;">(editedGrid);</span></span></code></pre></div><p>Output:</p><table><tr><th scope="col">(index)</th><th scope="col">0</th><th scope="col">1</th><th scope="col">2</th></tr><tr><th scope="row">0</th><td>0</td><td>1</td><td>2</td></tr><tr><th scope="row">1</th><td>3</td><td>4</td><td>5</td></tr><tr><th scope="row">2</th><td>6</td><td>7</td><td>8</td></tr></table><h4 id="combined-with-spread-syntax" tabindex="-1">Combined with <a href="#spread-syntax">spread syntax</a>: <a class="header-anchor" href="#combined-with-spread-syntax" aria-label="Permalink to &quot;Combined with [spread syntax](#spread-syntax):&quot;">​</a></h4><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code"><code><span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> grid </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [</span></span>
<span class="line"><span style="color:#24292E;">    [</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">3</span><span style="color:#24292E;">],</span></span>
<span class="line"><span style="color:#24292E;">    [</span><span style="color:#005CC5;">4</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">5</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">6</span><span style="color:#24292E;">],</span></span>
<span class="line"><span style="color:#24292E;">    [</span><span style="color:#005CC5;">7</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">8</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">9</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#24292E;">];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> editedGrid </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> grid.</span><span style="color:#6F42C1;">map</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">    (</span><span style="color:#E36209;">row</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> [</span></span>
<span class="line"><span style="color:#D73A49;">        ...</span><span style="color:#24292E;">row.</span><span style="color:#6F42C1;">map</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">            (</span><span style="color:#E36209;">item</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> item </span><span style="color:#D73A49;">-</span><span style="color:#005CC5;"> 1</span></span>
<span class="line"><span style="color:#24292E;">        ),</span></span>
<span class="line"><span style="color:#005CC5;">        0</span></span>
<span class="line"><span style="color:#24292E;">    ]</span></span>
<span class="line"><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">table</span><span style="color:#24292E;">(editedGrid);</span></span></code></pre></div><p>Output:</p><table><tr><th scope="column">(index)</th><th scope="column">0</th><th scope="column">1</th><th scope="column">2</th><th scope="column">3</th></tr><tr><th scope="row">0</th><td>0</td><td>1</td><td>2</td><td>0</td></tr><tr><th scope="row">1</th><td>3</td><td>4</td><td>5</td><td>0</td></tr><tr><th scope="row">2</th><td>6</td><td>7</td><td>8</td><td>0</td></tr></table>`,72),t=[e];function c(r,i,y,d,u,E){return a(),n("div",null,t)}const g=s(p,[["render",c]]);export{C as __pageData,g as default};
